from ast import walk
from typing import Tuple, Set, List, Dict

Coordinate = Tuple[int, int]  # (x,y)
Portal = Tuple[str, Coordinate, bool]


class WalkSpaceNode:
    def __init__(self, coordinate: Coordinate):
        self.coordinate = coordinate
        self.neighbors = set()
        self.portal = None
        return

    def link(self, neighbor):
        self.neighbors.add(neighbor)
        neighbor.neighbors.add(self)

    def addPortal(self, neighbor, inside):
        self.portal = (neighbor, inside)

    def __hash__(self):
        '''The only thing we hash is the x,y'''
        return hash(self.coordinate)


def findAdjacentCells(array, coordinate: Coordinate) -> List[Coordinate]:
    '''see if there are open cells above, below, left, and right of cell'''

    adjacent_cells = []

    if coordinate[0] > 0:
        adjacent_cells.append((coordinate[0] - 1, coordinate[1]))
    if coordinate[0] < len(array[coordinate[1]]) - 1:
        adjacent_cells.append((coordinate[0] + 1, coordinate[1]))
    if coordinate[1] > 0:
        adjacent_cells.append((coordinate[0], coordinate[1] - 1))
    if coordinate[1] < len(array) - 1:
        adjacent_cells.append((coordinate[0], coordinate[1] + 1))

    return adjacent_cells


def isCoordinateInsideDonut(array, coordinate):
    # find outer edges
    top_left = None
    last_maze_space = None
    for y, row in enumerate(array):
        for x, char in enumerate(row):
            if char == " " or char.isalpha():
                # empty_space
                continue
            else:
                # found part of the maze
                if top_left is None:
                    top_left = (x, y)
                last_maze_space = (x, y)
    return coordinate[0] >= top_left[0] and coordinate[0] <= last_maze_space[
        0] and coordinate[1] >= top_left[1] and coordinate[
            1] <= last_maze_space[1]


def resolvePortal(array, coordinate: Coordinate) -> Portal:
    '''if we think we've found a portal (a letter) we get the true name and coordinate of it'''
    x = coordinate[0]
    y = coordinate[1]

    def findNearestSpace(x, y):
        adjacent_cells = findAdjacentCells(array, (x, y))
        for adjacent_cell in adjacent_cells:
            if array[adjacent_cell[1]][adjacent_cell[0]] == ".":
                # this is the correct coordinate
                return (adjacent_cell[0], adjacent_cell[1])
        return None

    nearestSpace = findNearestSpace(x, y)

    chars = [array[y][x]]
    if y > 0 and array[y - 1][x].isalpha():
        chars.insert(0, array[y - 1][x])
        nearestSpace = findNearestSpace(
            x, y - 1) if not nearestSpace else nearestSpace
    if y < len(array) - 1 and array[y + 1][x].isalpha():
        chars.append(array[y + 1][x])
        nearestSpace = findNearestSpace(
            x, y + 1) if not nearestSpace else nearestSpace

    if x > 0 and array[y][x - 1].isalpha():
        chars.insert(0, array[y][x - 1])
        nearestSpace = findNearestSpace(
            x - 1, y) if not nearestSpace else nearestSpace
    if x < len(array[y]) - 1 and array[y][x + 1].isalpha():
        chars.append(array[y][x + 1])
        nearestSpace = findNearestSpace(
            x + 1, y) if not nearestSpace else nearestSpace

    if nearestSpace is None:
        nearestSpace = (-1, -1)

    return (''.join(chars), nearestSpace,
            isCoordinateInsideDonut(array, coordinate))


def parsePuzzleInput(puzzle_input):
    # load into array (easier to work with)
    array = []
    for row in puzzle_input.split("\n"):
        row_array = []
        for char in row:
            row_array.append(char)
        array.append(row_array)

    # find all walk spaces and portals
    walk_space = set()
    portals: Dict[str, Set[Coordinate]] = {}
    for y in range(0, len(array)):
        for x in range(0, len(array[y])):
            if array[y][x] == ".":
                walk_space.add((x, y))
            elif array[y][x].isalpha():
                portal = resolvePortal(array, (x, y))
                portal_name = portal[0]
                if portal_name not in portals:
                    portals[portal_name] = set()
                portals[portal_name].add(portal[1])

    # find portals
    frontier = list(walk_space)
    visited: Dict[Coordinate, WalkSpaceNode] = {}
    entrance = None
    destination = None
    while len(frontier) > 0:
        coordinate = frontier.pop(0)

        if coordinate in visited:
            walk_space_node = visited[coordinate]
        else:
            walk_space_node = WalkSpaceNode(coordinate)
            visited[coordinate] = walk_space_node

        adjacent_coordinates = findAdjacentCells(array, coordinate)
        for adjacent_coordinate in adjacent_coordinates:

            neighbor: WalkSpaceNode

            adj_x = adjacent_coordinate[0]
            adj_y = adjacent_coordinate[1]

            # we've already seen it
            if adjacent_coordinate in visited:
                neighbor = visited[adjacent_coordinate]

            # not seen it, construct new one
            elif adjacent_coordinate in walk_space:
                neighbor = WalkSpaceNode(adjacent_coordinate)
                visited[adjacent_coordinate] = neighbor

            elif array[adj_y][adj_x].isalpha():
                # adjacent node is a portal, so let's link to the other side
                portal: Portal = resolvePortal(array, adjacent_coordinate)

                if portal[0] == "AA":
                    entrance = walk_space_node
                elif portal[0] == "ZZ":
                    destination = walk_space_node

                if portal[0] in portals:
                    for node_coordinate in portals[portal[0]]:
                        # find the other side
                        if node_coordinate != coordinate:
                            if node_coordinate in visited:
                                neighbor = visited[node_coordinate]
                            else:
                                neighbor = WalkSpaceNode(node_coordinate)
                                visited[node_coordinate] = neighbor
                            walk_space_node.link(neighbor)
                            walk_space_node.addPortal(neighbor, portal[2])
                            neighbor.addPortal(walk_space_node, not portal[2])
                            break
                continue
            else:
                continue
            walk_space_node.link(neighbor)

    return (entrance, destination)


def aStar(start, destination, recursive=False):
    '''
    We have a concept of a "level" so that we can handle the recursive case where
    we can go up and down separate layers of the maze. Having the level as part of
    the keys for frontier and visited nodes allows us to differentiate them during
    aStar
    '''
    frontier = [(0, start, 0)]
    visited = {}
    while len(frontier) > 0:
        current_path_info = frontier.pop(0)
        current_level = current_path_info[0]
        current_node = current_path_info[1]
        current_distance = current_path_info[2]
        current_portal = current_node.portal

        if current_node == destination and current_level == 0:
            return current_distance

        visited[(current_level, current_node)] = current_distance

        for neighbor in current_node.neighbors:

            next_level = current_level
            if recursive and current_portal and neighbor == current_portal[0]:
                inside = current_node.portal[1]
                next_level += -1 if inside else 1

            if (next_level, neighbor) in visited:
                if current_distance + 1 < visited[(next_level, neighbor)]:
                    visited[(next_level, neighbor)] = current_distance + 1
            else:
                if recursive and current_portal:
                    inside = current_portal[1]
                    if current_level == 0 and not inside:
                        # if we are on the top level, can't take outside portals
                        continue
                frontier.append((next_level, neighbor, current_distance + 1))

        frontier.sort(key=lambda x: x[2])
    return -1


def solve(puzzle_input):
    stuff = parsePuzzleInput(puzzle_input)
    distance = aStar(stuff[0], stuff[1], True)
    print(distance)
    return


solve(
    """                                       M       I     A   Q     Z     Z   X     G   P                                           
                                       F       A     F   U     I     Z   R     C   R                                           
  #####################################.#######.#####.###.#####.#####.###.#####.###.#########################################  
  #.........#.#.#...#...........#.#.#.......#.......#.#.....#.....#...#.....#.#...#.#.....#.........#.....#.......#.......#.#  
  #.#####.###.#.###.#.###.#####.#.#.#######.###.#.###.#.#.###.###.###.#.###.#.#.###.#.#.###.###.###.###.#######.###.#.###.#.#  
  #.#...#...#.#.........#.#.....#.....#.#.#...#.#...#...#...#...#...#...#.#.#...#.....#.......#.#...................#...#...#  
  ###.###.###.###.###########.#.#####.#.#.#.#####.#.#######.###.#####.#.###.###.#######.#.#######.#.#.#######.#.#.#####.###.#  
  #...#.#...........#.........#...#.......#...#...#.#.......#.....#...#.#...#.#...#...#.#.#...#...#.#...#.#.#.#.#.....#...#.#  
  ###.#.#.#####################.#####.###.#.#####.#####.#.###.#############.#.###.#.#.###.#.###.#####.###.#.###.###.#########  
  #.........#...#.#...#.#.#.......#...#.#.....#.....#...#.#...#...#.......#.#.....#.#.........#.#.#...#.......#.#.....#...#.#  
  #.###########.#.###.#.#.#.#####.###.###.#.#.#.###.#.#######.#.#####.###.#.###.###.###.#.#.#####.###.#####.###.#########.#.#  
  #.....#...#...#...........#.........#.#.#.#.#.#...#...#.#.#...#.#.....#...#.....#...#.#.#.......#.....#...#.#.....#.#.#.#.#  
  #.#######.#.#.#####.#.###.#####.#.#.#.###########.#.###.#.###.#.###.#.#####.#####.#.#####.#.###.#######.###.#######.#.#.#.#  
  #.#.......#.#...#...#.#...#...#.#.#.#.....#.#.....#.....#.......#...#.....#.....#.#.#.#.#.#.#.....#...#...#.#.#.#.........#  
  #####.#######.#####.#######.#.#.###.#.#####.###.#.#.#######.###.#####.#.#.###.#.#.###.#.#############.#.###.#.#.#.#######.#  
  #.........#.....#.#.#.#...#.#.....#.....#.#.....#.#.#...#...#.......#.#.#.#...#.#...#...#.....#.......#.............#...#.#  
  #.#.###.###.#.#.#.###.###.###.#####.#####.###.###.#.###.###.###.#######.#.###.#.#.#####.#.#####.#######.#.#####.#.###.#####  
  #.#.#.....#.#.#.#.#.....#.......#.#...#.....#...#.#...#.......#...#.....#.#...#.#...........#.#.....#...#.#...#.#...#.#...#  
  #######.#######.#.###.###.#.#.###.###.#.###.#####.#.#.#####.#########.###.#.#####.###.###.###.#.#######.###.#######.#.###.#  
  #.#.....#...#...#...#...#.#.#...#.#.....#.#.#.....#.#.#.....#.......#.#...#.....#...#.#...........#.#.......#...#.....#...#  
  #.#####.###.#.#####.#.###.#######.#.#.#.#.#.#.###.#.#######.###.#########.###.###.###.#####.#.###.#.#.#.#####.#####.#####.#  
  #.#.#...#.#.....#.#.....#.#.#.#.#...#.#...#.#.#.#.#.#.....#.#.....#.....#.#...#.....#.....#.#.#.#.....#...#.#.#...#.#...#.#  
  #.#.###.#.#####.#.###.#####.#.#.###.###.#######.#.#.#.#.###.###.#####.###.#.#####.#############.###.#.#####.#.###.###.###.#  
  #.#.....#.#.............#...#.....#.#...#.........#.#.#.#.#.......#.#.#...#.#.#...#.#.......#.....#.#.......#...#...#.#...#  
  #.###.#.#.#.#####.#.#.#####.###.#.#.#######.#####.#.###.#.###.#.###.#.###.#.#.###.#.###.###.###.###.#########.###.###.###.#  
  #...#.#...#.#...#.#.#...#.#.....#.....#...#.#.....#.#...#.#...#...#.#.....#.#.#...........#.....#.#...#.....#.#.......#.#.#  
  ###.###.#.#####.###.###.#.#######.#.#####.###.#####.#.#.#.#######.#.#.###.#.#.#####.#.#######.###.#.###.#####.###.#.###.#.#  
  #.......#.#.......#.#...#...#.....#...#.........#.#.#.#.......#...#.....#.#.....#.#.#.......#...#.#.#.#...#.#.....#.#...#.#  
  #.#.#.#######.#.#.###.###.#########.#######.###.#.#.#.###.#.#.###.#.#########.###.#.###.#####.###.###.###.#.#####.###.###.#  
  #.#.#.#.#...#.#.#...#.#.#...#...#.#.#.#.......#.#...#...#.#.#.#...#.....#.#...#.#...#...#...#...#...#.#.#.....#...#...#...#  
  #####.#.#.#######.###.#.###.#.###.#.#.#####.#######.###.#.#####.#.#.#####.#.###.#.#######.#.#####.###.#.#.###.###.#.#####.#  
  #.......#...#.#...#...#.#.............#.......#...#.#...#.#...#.#.#.....#.....#...........#...#.#.#.#.......#.#.....#.#...#  
  #####.#.#.###.###.#.###.#####.#.###.#.#####.#.#.###.#.###.###.#.###.#######.#####.###.#.#######.#.#.#####.#######.###.#.#.#  
  #.#...#...#.#.........#.#.....#.#...#...#...#...#.....#...#.......#.....#.......#.#...#.#.......#...#...#.....#.......#.#.#  
  #.#.#.#####.#####.#####.###.#.#######.#######.#####.###.#####.#########.###.#########.#####.#######.#.###.#######.#######.#  
  #.#.#...#...#.#.....#.#.#...#.#.#    Q       I     G   B     G         T   H         L    #...#.#.......#.....#.#...#.....#  
  #.###.###.#.#.#####.#.#.#######.#    U       Q     O   V     C         X   P         N    #.###.###.#####.#.###.#.#.###.###  
IQ........#.#.#.#...#.#...#.#.#.#.#                                                         #...#.#...#.#...#.#.#...#.#...#.#  
  ###.#####.###.###.#.#.###.#.#.#.#                                                         #.###.###.#.###.###.###.#.###.#.#  
  #.....#.......#.#.....#...#...#..VI                                                     XR........................#.#.#...#  
  #.###.#.#####.#.#.###.#.#.#.#.#.#                                                         #.###.#.###.#####.#.#######.#.#.#  
  #.#.#.....#.........#...#...#...#                                                         #...#.#...#...#.#.#.....#.#.#.#.#  
  ###.###########.#####.###.#######                                                         #.###.#########.###.#####.#.#.#.#  
GD......#.#.....#.....#.#.#...#...#                                                         #.#.#.....#.....#...#.....#.#.#.#  
  ###.###.###.#####.#####.#####.#.#                                                         ###.#########.#.###.#.#.#.#.#.#.#  
  #.......#.......#.#.....#.....#.#                                                         #...#.#.#.#.#.#.#.....#.#.....#..OU
  #####.#####.#.#####.#######.#.#.#                                                         ###.#.#.#.#.#.###########.#######  
  #.....#.#.#.#...#.....#.#.#.#.#..HN                                                       #.......................#.#...#..VI
  ###.###.#.#.###.#.#.###.#.###.#.#                                                         ###.#######.###.###.#.#.###.#.#.#  
  #.#...........#...#...........#.#                                                         #...#...#.....#.#...#.#.#.#.#...#  
  #.###############.###############                                                         ###.#.###.#.###.###.#####.#.#.###  
YC....#...#.......#.#.#.#...#.#.#.#                                                         #.......#.#.#...#...#.......#.#.#  
  #.###.#.###.###.###.#.###.#.#.#.#                                                         #####.#.#######.###.#.###.#.###.#  
  #.....#.......#..................IA                                                     GD......#.#.#.....#.#...#.#.#...#.#  
  #################################                                                         #########.#######.#####.#######.#  
  #.#.......#...............#.....#                                                       MF..........#.............#.......#  
  #.#.###.#.#.###.###.#.###.#.###.#                                                         #.#######.#.#####.#.###.#####.#.#  
  #.....#.#.#...#.#...#...#.....#.#                                                         #.#.#...#.#.#.#.#.#.#.#...#...#.#  
  #.#######.#.###.#.#.#####.#####.#                                                         #.#.#####.#.#.#.#####.###.#.#.#.#  
  #.....#...#...#.#.#.#.......#...#                                                         #...#.....#...#...#.......#.#.#..DM
  ###.###.#.#.###################.#                                                         #.#.#.#######.#.###.#.#######.#.#  
TX....#.#.#...#...#.#.#.......#....ZI                                                       #.#.#...........#...#.........#.#  
  #####.#########.#.#.#.###.#####.#                                                         #.#####.#.#####.#################  
  #...........#.......#.#.......#.#                                                         #.#.#.#.#.#...#.#................AA
  #.###.#.###.#.#####.###.###.#####                                                         ###.#.#.###.#.###.#.###########.#  
  #.#.#.#.#...#...#...#.....#.....#                                                         #...#.#.#...#.....#...........#.#  
  #.#.#######.#.#####.#####.###.###                                                         ###.#.#####.###.#.#.###.#.#.#.###  
  #...#...#.........#.#...#.#.....#                                                         #.......#...#.#.#.#...#.#.#.#....VD
  #.#####.###.#######.#.#.#.#.#####                                                         #.###.#####.#.#####.#############  
HN..#...#.#.......#.....#...#......AF                                                     DM....#.........#.......#.....#.#.#  
  ###.###.###########.#.###.#.#####                                                         #######################.#####.#.#  
  #...............#.#.#.#.#.#...#.#                                                         #...#.............#.............#  
  ###.#######.###.#.#####.#######.#                                                         #.#.#.#######.#########.#.###.###  
UV..#...#.#...#...#...............#                                                         #.#.#.....#.........#.#.#...#....GO
  #.#.###.#.#########.###.#######.#                                                         #.#.#.#######.###.###.#.#.#.###.#  
  #.....#.......#.......#...#...#.#                                                         #.#.#...#.#...#.#.......#.#.#...#  
  #.#.###.#.###.###.###.#.#.###.#.#                                                         #.#.#.###.#####.#.###.#.#######.#  
  #.#...#.#...#.....#.#.#.#.#......XA                                                     PR..#.....#.#...#.#...#.#.#...#.#.#  
  #############.###.#.#######.#.###                                                         #########.#.#.#.#######.###.#.###  
  #.#.........#.#.#.#.#.....#.#.#.#                                                       VD..#.........#.#.....#.#...#.#...#  
  #.#####.#.#####.###.#####.#####.#                                                         #.#.#.#####.###.###.#.#####.#.#.#  
XA..#.....#...#...#...#.#.#.#.#.#..YY                                                       #.#.#.#.........#.....#.......#..UD
  #.###.###.###.###.###.#.#.#.#.#.#                                                         #.#.#######.#.#.###.###.#######.#  
  #.......#.#...#...#...#.....#...#                                                         #.#.....#...#.#.#...........#...#  
  #.###.###.#.#.#.#.#.#.#.###.#.#.#                                                         #.#.#####.###.#####.###.#######.#  
  #...#...#...#...#...#.....#...#.#                                                         #.....#...#.....#...#.#...#.#...#  
  #.###.###.###.#.#.###.###.###.###        U           V   Q       O     U       Y          #.#.#.###.###.#####.#.#.###.#####  
  #.#...#.....#.#.#.#.#...#.#...#.#        V           J   D       U     D       C          #.#.#.#.....#.#.#.....#.........#  
  #.#######.###.#.###.#.#.#.###.#.#########.###########.###.#######.#####.#######.###########.#######.#.###.#.#####.#####.#.#  
  #.....#...#...#.#.....#.#.#.........#.#.#.....#.........#.#.#.....#...#.......#.#.........#.....#...#.....#...#.....#...#.#  
  ###.#####.###.#.###.#.#######.###.###.#.#.###.#.#########.#.###.#.#.#.#####.###.#####.###.#########.###.#######.###.#######  
  #.....#.#...#.#.#...#.#.#.....#...#.........#.#.........#.....#.#.#.#.#.....#.#...#.....#...#.........#...#.....#.........#  
  ###.#.#.#.###.###.#.#.#.#####.###.###.###.###.#######.###.#.#.#.###.#.#.#####.#.#####.###########.#.###.#.#.###.#####.###.#  
  #.#.#...#...#...#.#.#.#.#.......#.#...#...#...#.........#.#.#.#.....#.#.......#.....#.#.#.......#.#...#.#.#.#.#.#.....#...#  
  #.###.###.###.#####.###.###.###.#####.#####.###.###.#####.###.#.###.#.###.###.#.#####.#.#.#########.#######.#.###.#.#####.#  
  #.......#...#...#...#.........#.#.#.....#.#...#.#.#.#.....#...#.#.#.#...#...#.#.........#.......#.....#.#.......#.#.#.....#  
  #.###.#.#######.###.#####.#######.#####.#.#.###.#.#.#.#####.#####.###.#######.#.#####.#.#.#########.#.#.###.#######.#####.#  
  #.#...#...#.......#.#.......#.........#.#.....#...#.#.#.....#...#...#...#.....#...#...#...#.#...#...#...#.#.....#.......#.#  
  #####.###.#####.#.###.###.#########.#####.###.###.#.###.#.#.###.#.###.#.#.#####.#.###.###.#.#.#####.#####.#.#.###.#.#.#.#.#  
  #...#...#...#...#.#...#.......#.....#...#.#...#...#...#.#.#...#.....#.#.#.....#.#...#.#.#.........#...#.....#.#...#.#.#.#.#  
  ###.#.###.###.#.###.###.#.#.#.#####.#.#######.#.#############.#####.#.###.###.#.#.#####.###################.#####.###.#.###  
  #.....#...#.#.#...#.#...#.#.#.....#.....#.....#...#.....#.......#.......#.#...#.#.#...................#.......#.....#.#...#  
  #####.#####.###########.#.#########.#.#######.#.#####.#####.#######.#.#####.###.#####.#######.#########.###.###########.#.#  
  #.........#...#.........#...#.......#.#.#.#...#.#.....#...#...#.....#.#.......#.#.#.....#...#.........#.#.......#.#.....#.#  
  ###.#.#######.###.#.#.###.###.###.###.#.#.#.###.###.###.#####.#####.#########.#.#.#.#####.#######.#.#######.###.#.###.#.#.#  
  #...#.#...........#.#.#...#.....#.#.......#...#.......#.#...#...#.......#.#.#.#.............#.....#.#...#.....#.#.....#.#.#  
  #.#.#######.###########.###.#######.###.#.###.#.###.###.###.#.###.#.#####.#.#.#######.###.###########.#####.#.#####.#.#.###  
  #.#...#.....#.#...#...#...#.#...#.#...#.#.....#.#.#.#.........#.#.#...#.......#.#.#...#.........#.#.....#...#...#...#.#...#  
  #.#.#####.#.#.###.###.#########.#.#####.#######.#.#####.#######.#####.#######.#.#.###.###.###.#.#.###.#.###########.###.###  
  #.#...#...#...#.........#.#...#.#...#.......#.....#.....#.....#...#.....#...#.#.....#.#.....#.#...#...#.#...#...#.....#...#  
  #.###.###.#.#####.#####.#.###.#.#.#.###.###.###.#.#####.#.###.#.#.#.#####.###.#.###.#.###.#######.###.#####.#.#####.###.#.#  
  #...#...#.#.#.#...#.............#.#.....#.....#.#.#.....#.#.#.#.#.#.......#...#.#.#.#...#.#...#.....#...#.#.......#...#.#.#  
  ###.###.#####.#.###############.###.#########.#.#####.#.#.#.#.#.#.###.#.###.###.#.#.#.#####.#######.#.###.#.#####.#.###.#.#  
  #...#...#.......#.......#.....#.....#.....#.#.#.....#.#.#.#.#.#.#...#.#.#.....#...#.......#.#...#...............#.#.#.#.#.#  
  #.#######.#######.#.#.#####.#.#.#.#####.#.#.#.#.###.###.#.#.#.#.###.#.#######.#.#.###.###.#.#.#####.#.###.###.#######.###.#  
  #.#.#...#...#.....#.#.......#...#...#...#.....#.#.#.#.#...#.#.#...#.#.....#.#.#.#...#...#.......#...#...#...#...........#.#  
  ###.###.#.#.###.#####.#.#.#####.#.###.###.###.###.#.#.#.#.###.###.#.#.###.#.#.#####.#.#####.###.###.###.###.#.###.#######.#  
  #.........#.#...#.#.#.#.#.#.....#...#...#.#...#...#...#.#...#.#...#.....#.#.......#.#...#.....#...#.#.#.#...#.#.........#.#  
  #.###.#.#.#####.#.#.#.#.###.#######.#.###.###.###.###.#######.#.#############.#####.#########.###.#.#.###.###.#.#####.#.###  
  #.#...#.#...#...#.....#.#.....#.....#.#.....#.#.......#.......#.......#.........#.........#.....#.#...#...#...#.....#.#...#  
  ###########################################.#####.#######.#########.#######.#######.#######################################  
                                             V     B       H         Y       L       Q                                         
                                             J     V       P         Y       N       D                                         """
)
